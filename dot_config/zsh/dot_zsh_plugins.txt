#!/bin/zsh
#
# .zsh_plugins.txt - antidote plugins file
#

### Regular Plugins
https://github.com/peterhurford/up.zsh
rummik/zsh-tailf
mattmc3/zman
MichaelAquilina/zsh-you-should-use

# With antidote, using Zephyr's completion plugin is recommended. This plugin is meant
# to be run near the TOP of your .zsh_plugins.txt file.
mattmc3/zephyr path:plugins/completion

# https://github.com/jnooree/zoxide-zsh-completion
jnooree/zoxide-zsh-completion kind:fpath

# zsh-users/zsh-completions is a popular plugin for adding supplemental completions.
# We combine the `path:` and `kind:fpath` annotations here:
zsh-users/zsh-completions path:src kind:fpath


### Local Plugins
$ZDOTDIR/.aliases
#$ZDOTDIR/custom/plugins/example

### Local Plugins with Variables
#
# If you want to use variables in this file, you will need to use the envsubst utility.
# It may come installed on your system, or be available in your OS package manager. Or,
# you can use the Python one-liner wrapper function included in this sample project.
# To replace environment variables, you need to change your `antidote bundle` call to
# this.
#
#   zsh_plugins=${ZDOTDIR:-~}/.zsh_plugins.zsh
#   envsubst <${zsh_plugins:r}.txt | antidote bundle >|$zsh_plugins
#
###
# reference your own plugins
# $ZSH_CUSTOM/plugins/nodejs
# $ZSH_CUSTOM/plugins/python
# $ZSH_CUSTOM/plugins/ruby


### Prompts
#
# You can make certain themes available to the built-in Zsh prompt command using the
# `kind:fpath` annotation. A theme is not active for the prompt until this command is
# run:
#
#   autoload -Uz promptinit && promptinit
#   prompt ${prompt_name:-pure}
#
# There are two ways to load prompts.
# - Add multiple prompt plugins to your `$fpath` with `kind:fpath` and then later in
#   your .zshrc run the Zsh built-in `prompt` to select the theme.
# - Or, just load one prompt like a regular plugin.
#
###

# Use kind:fpath for prompts you want available to promptinit.
#romkatv/powerlevel10k kind:fpath
#sindresorhus/pure kind:fpath


### Utilities
romkatv/zsh-bench kind:path


### Frameworks
#
# Frameworks are a collection of Zsh features, settings, and plugins meant to ease
# Zsh configuration. Unfortunately, all that power can come with serious drawbacks.
# Frameworks can often set more settings or aliases than you need, cluttering your Zsh
# config and slowing things down. Use with caution!
#
# Frameworks are handled in antidote using the `path:location/of/plugin` annotation.
#
###

ohmyzsh/ohmyzsh path:lib/clipboard.zsh
ohmyzsh/ohmyzsh path:plugins/copypath
ohmyzsh/ohmyzsh path:plugins/fancy-ctrl-z

belak/zsh-utils path:editor


### Deferred Plugins
#
# Antidote allows you to defer loading plugins. This is similar to concepts like "turbo
# mode" in other plugin managers. Antidote handles deferring plugins by leveraging
# romkatv/zsh-defer, which "defers execution of a zsh command until zsh has nothing else
# to do and is waiting for user input". In general, you should not defer plugins unless
# you know for sure they properly support deferred loading, and there are no adverse
# side-effects (see: https://github.com/romkatv/zsh-defer#Caveats).
###

# Syntax highlighting
zdharma-continuum/fast-syntax-highlighting kind:defer


### Final Plugins
#
# Remember plugin order matters! Put plugins that need run last at the bottom of your
# .zsh_plugins.txt file.
#
###

## I suspect this wants to be loaded late for $fpath to be populated
## but the readme says load early
marlonrichert/zsh-autocomplete

# These popular core plugins should be loaded at the end
zsh-users/zsh-autosuggestions
#zsh-users/zsh-history-substring-search
## This plugin expects the completion system to be fully initialized already
## It's probably initalized by a plugin above
dim-an/cod

zpm-zsh/ls
# vim: ft=conf
